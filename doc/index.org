#+TITLE: scroll-utility
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="index.css" />
#+INFOJS_OPT: path:org-info.js view:info
#+STARTUP: content
#+OPTIONS: num:nil

* Features
- Extremely powerful for scrolling to anywhere in the page, like centering
  elements to certain degree.
- Custom easing animations for scrolling
- Detect onScroll events and differentiate between user and utility scroll
- High performance
- Dependency free
- Small footprint 9.32KiB
- Typescript friendly
- Handle multiple scroll animation at the same time

* Installation
From npm:
#+BEGIN_SRC bash
$ npm install --save scroll-utility
#+END_SRC

From a cdn: [[https://www.jsdelivr.com/package/npm/scroll-utility][jsdelivr]]
#+BEGIN_SRC html
<script src="https://cdn.jsdelivr.net/npm/scroll-utility@5"></script>
#+END_SRC
when downloading from a cdn the package will be globally exported as _ScrollUtility_

* *Scroll*
The *Scroll* class is the one used to scroll
#+BEGIN_SRC typescript
import { Scroll } from "scroll-utility"
// const Scroll = ScrollUtility.Scroll // from cdn

const scrollManager = new Scroll()
scrollManager.scroll("#some-element").offset(-50)
#+END_SRC
** constructor
The *Scroll* constructor accepts several options:
#+BEGIN_SRC typescript
import Scroll from "scroll-utility";

new Scroll({
    element?,
    horizontal?,
    duration?,
    easing?,
    onScroll?,
}) // or
new Scroll(element?, horizontal?, duration?, easing?, onScroll?)
#+END_SRC

Quick overview of each parameter:
|------------+-----------------+------------------------------------+--------------------------------------------------------------------------|
| parameter  | default value   | type                               | notes                                                                    |
|------------+-----------------+------------------------------------+--------------------------------------------------------------------------|
| element    | window          | string; Window; Element            | element where the scroll will take place, a string means a querySelector |
| horizontal | false           | boolean                            | direction of the scroll animation                                        |
| duration   | 1000            | number                             | default duration of scroll animations, in miliseconds                    |
| easing     | "easeInOutQuad" | string; (t, b, c, d) => number     | easing function used for scroll animations                               |
| onScroll   | null            | null; (external?: boolean) => void | callback function onscroll                                               |

For example, to create a horizontal *scrollManager* within "#container", with a
duration of *500ms* for its '*linear*' scroll animation, that logs *"hi"* every time
it scrolls:

#+BEGIN_SRC typescript
new Scroll({
    element: "#container",
    horizontal: true,
    duration: 500,
    easing: "linear",
    onScroll: () => console.log("hi"),
})
#+END_SRC
It's also posible to pass parameters without an object
#+BEGIN_SRC typescript
new Scroll(
    "#container",
    true,
    500,
    "linear",
    () => console.log("hi")
)
#+END_SRC

*** element
#+BEGIN_SRC typescript
new Scroll({ element: "#container" })
#+END_SRC
The *element* option when creating a 'scrollManager' indicates the element in which the scroll will take place.
By default it will scroll normally in the page, as in *window* or in *document.documentElement*

It can be the result of *document.getElementById* or *document.querySelector*.

If it's a *string*, then it will use it as a *querySelector* with
*document.querySelector* for getting an *Element*.

You can call *document.querySelector* beforehand if you want to ensure
the element exists

*** horizontal
#+BEGIN_SRC typescript
new Scroll({ horizontal: true })
#+END_SRC
The *horizontal* option indicates the direction when scrolling, by default
*false*, wich means vertical scroll

*** duration
#+BEGIN_SRC typescript
new Scroll({ duration: 0 })
#+END_SRC
The *duration* option indicates the default duration of the scroll animations in milliseconds, by default _1000ms_
It will be used along with [[easing]] for creating the *smooth* animation when scrolling

If you want to disable the /smooth/ animation, set *duration* to 0.

It can be changed any time:
#+BEGIN_SRC typescript
const scrollManager = new Scroll({ duration: 0 })

scrollManager.duration = 999
#+END_SRC
*** easing
#+BEGIN_SRC typescript
new Scroll({ easing: "linear" })
#+END_SRC
The *easing* option indicates the default animation of the scroll, by default *"inOutQuad"*

Posible values are "linear" and some of the form: 'easeIn{*type*}' | "easeOut{*type*}" | "easeInOut{*type*}"; being *type*: "Quart",
"Cubic", "Bounce"...

You can also create your own easing function:
#+BEGIN_SRC typescript
  new Scroll({ easing: (t, b, c, d) => c / d + b })
#+END_SRC
Thats the function I use for "linear"

Learn more about easing functions [[https://easings.net/en][here]]

It can be changed any time:
#+BEGIN_SRC typescript
const scrollManager = new Scroll({ easing: "linear" })

scrollManager.easing = "easeOutBounce"
#+END_SRC
*** onScroll
#+BEGIN_SRC typescript
new Scroll({
  onScroll: (external) => {
    if (external) {
        console.log("external scroll")
    } else {
        console.log("internal scroll")
    }
  },
})
#+END_SRC

What does it mean?, well, *external* is an attempt
It can be changed any time:
#+BEGIN_SRC typescript
const scrollManager = new Scroll({ onScroll: null })

scrollManager.onScroll = () => alert("hi")

#+END_SRC
** scroll
#+BEGIN_SRC typescript
const scrollManager = new Scroll()

// toPosition
scrollManager.scroll({
    value,
    duration?,
    easing?
}) // or
scrollManager.scroll(value, duration?, easing?)

// toElement
scrollManager.scroll({
    element,
    value?,
    duration?,
    easing?
}) // or
scrollManager.scroll(element, value?, duration?, easing?)
#+END_SRC
*** to "position"
#+BEGIN_SRC typescript
const scrollManager = new Scroll()

scrollManager.scroll({
  value,
  duration?,
  easing?,
})
//or
scrollManager.scroll(value, duration?, easing?)
#+END_SRC

Calling *scroll* will do scroll to the position *value*: eg. *0* will do scroll
to the top of the page

*duration* is the duration of that scroll action. If not specified it will use the
one in [[duration][constructor]].

*easing* is the ease animation of that scroll action. If not specified it will use the
one in [[easing][constructor]].
*** to "element"
#+BEGIN_SRC typescript
const scrollManager = new Scroll()

scrollManager.scroll({
    element,
    value?,
    duration?,
    easing?,
})
//or
scrollManager.scroll(element, value?, duration?, easing?)
#+END_SRC

Calling *scroll* will do scroll to the position of the element *element*, and
will center it at *value*, 0 by default. ie. the element will be at the top of
the screen

*duration* is the duration of that scroll action. If not specified it will use the
one in [[duration][constructor]].

*easing* is the ease animation of that scroll action. If not specified it will use the
one in [[easing][constructor]].
** offset
#+BEGIN_SRC typescript
const scrollManager = new Scroll()

scrollManager.offset({
  value: 100,
  duration: 1000,
  easing: "some",
})
//or
scrollManager.offset(100, 1000, "some")
#+END_SRC
** other
*** stopAllAnimations
To stop all scroll animations:
#+BEGIN_SRC typescript
const scrollManager = new Scroll()
scrollManager.stopAllAnimations()
#+END_SRC
*** size
The size of the *Scroll* container
#+BEGIN_SRC typescript
(new Scroll()).size // size of the window
(new Scroll("#container")).size // size of the element #container
#+END_SRC
The orientation of the value returned depends on the direction specified in the [[horizontal][contructor]]
*** scrollSize
The total scroll you can do within the *Scroll* container
#+BEGIN_SRC typescript
(new Scroll()).scrollSize // scrollSize of the windows
(new Scroll("#container")).scrollSize // scrollSize of the element #container
#+END_SRC
It's related to *scrollWidth/scrollHeight* properties of /HTMLElements/.

The orientation of the value returned depends on the direction specified in the [[horizontal][contructor]]
*** scrollPosition
The current position of the scroll
#+BEGIN_SRC typescript
(new Scroll()).scrollPosition // scrollPosition of the windows
(new Scroll("#container")).scrollPosition // scrollPosition of the element #container
#+END_SRC

For example, if you
#+BEGIN_SRC typescript
(new Scroll()).scroll(100)
#+END_SRC
the *scrollPosition* will be 100


The orientation of the value returned depends on the direction specified in the [[horizontal][contructor]]
*** getRelativeElementPosition
The relative position of certain element
#+BEGIN_SRC typescript
(new Scroll()).getRelativeElementPosition("#some-element")
#+END_SRC
It relates to [[to "element"][scroll]] (to "element"), so for example, if you
#+BEGIN_SRC typescript
(new Scroll()).scroll("#some-element", 0.5)
#+END_SRC
the relative position will be *0.5*
* Other useful functions
* Browser Compatibility
There are automated test for several browsers, thanks to [[https://www.browserstack.com][Browserstack]].

Compatibility garanteed in all major browsers.

#+ATTR_HTML: :align middle
[[https://3fxtqy18kygf3on3bu39kh93-wpengine.netdna-ssl.com/wp-content/uploads/2018/03/header-logo.svg]]
