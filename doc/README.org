#+TITLE: scroll-utility
#+HTML_LINK_HOME: https://leddgroup.github.io/scroll-utility
#+HTML_DESCRIPTION: A simple to use scroll utility package for centering elements, and smooth animations
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="assets/index.css">
#+HTML_HEAD: <script type="text/javascript" src="index.js"> </script>
#+HTML_HEAD: <script type="text/javascript" src="scroll-utility.js"> </script>
#+INFOJS_OPT: path:assets/org-info.js view:info
#+OPTIONS: num:nil
#+STARTUP: content

* Features
  - Extremely powerful for scrolling to anywhere in the page, like centering elements to certain degree.
  - Custom easing animations for scrolling
  - Detect onScroll events and differentiate between user and utility scroll
  - High performance
  - Dependency free
  - Small footprint 9.32KiB
  - Typescript friendly
  - Handle multiple scroll animation at the same time

* Installation
  From npm:
  #+BEGIN_SRC sh
    $ npm install --save scroll-utility
  #+END_SRC
  From a cdn: [[https://www.jsdelivr.com/package/npm/scroll-utility][jsdelivr]]
  #+BEGIN_SRC html
    <script src="https://cdn.jsdelivr.net/npm/scroll-utility@5"></script>
  #+END_SRC

* How to scroll
  #+INCLUDE: "examples/howto.ts" src typescript
  #+BEGIN_SRC pug :exports results :results html
    details
      summary Demo:
      .scroll-container
        .button-container
          each item in ["scrollTo(0)", "offset(-200)",  "scrollTo(\'#here\')","offset(200)",  "scrollTo(10000)"]
            button.scroll-button(onclick=`ScrollUtility.${item}`)=item
        hr.spacer
        #here.some-element
          h1 #here
        hr.spacer
  #+END_SRC

  =ScrollUtility= is an instance of the class [[Scroll]],
  so you can use it without having to create a =Scroll= instance just to scroll.

  Still =Scroll= is exported so you can customize several options,
  and/or specify a ~container~ in which scroll

  You can access =Scroll= by =ScrollUtility.Scroll=.
  Head over to [[Scroll]] to see how to customize it and other useful features

* Scroll
** constructor
   #+INCLUDE: "examples/constructor.ts" src typescript

   That will create a =Scroll= instance, which you can use to scroll. \\
   [[How to scroll][ScrollUtility]] is an instace of =Scroll= with default values

*** container
    #+INCLUDE: "examples/constructor-container.ts" src typescript
    #+BEGIN_SRC pug :exports results :results html
      details
        summary Demo:
        .scroll-container
          .button-container
            button.scroll-button(onclick=`scrollConstructorContainer()`) scroll window
          hr.spacer
          #container.some-element.scroll-container(position="relative")
            h1 #container
            .button-container.left
              button.scroll-button(onclick=`scrollConstructorContainer(true)`) scroll container
            hr.spacer
            hr.spacer
          hr.spacer
    #+END_SRC
    
*** options
**** element
     #+BEGIN_SRC typescript
       new Scroll({ element: "#container" })
     #+END_SRC
     The *element* option when creating a 'scrollManager' indicates the element in which the scroll will take place.
     By default it will scroll normally in the page, as in *window* or in *document.documentElement*

     It can be the result of *document.getElementById* or *document.querySelector*.

     If it's a *string*, then it will use it as a *querySelector* with
     *document.querySelector* for getting an *Element*.

     You can call *document.querySelector* beforehand if you want to ensure
     the element exists

**** horizontal
     #+BEGIN_SRC typescript
       new Scroll({ horizontal: true })
     #+END_SRC
     The *horizontal* option indicates the direction when scrolling, by default
     *false*, wich means vertical scroll

**** duration
     #+BEGIN_SRC typescript
       new Scroll({ duration: 0 })
     #+END_SRC
     The *duration* option indicates the default duration of the scroll animations in milliseconds, by default _1000ms_
     It will be used along with [[easing]] for creating the *smooth* animation when scrolling

     If you want to disable the /smooth/ animation, set *duration* to 0.

     @@html:
     <div id="scroll-duration" class="scroll-container">
     <div class="button-container">
     <button class="scroll-button" onclick="scrollDuration()"> default: 1000 </button>
     <button class="scroll-button" onclick="scrollDuration(750)"> 750 </button>
     <button class="scroll-button" onclick="scrollDuration(500)"> 500 </button>
     <button class="scroll-button" onclick="scrollDuration(250)"> 250 </button>
     <button class="scroll-button" onclick="scrollDuration(0)"> 0 </button>
     </div>
     <h1> Top </h1>
     <hr class="spacer" />
     <h1> Bottom </h1>
     </div>
     @@

     It can be changed any time:
     #+BEGIN_SRC typescript
       const scrollManager = new Scroll({ duration: 0 })

       scrollManager.duration = 999
     #+END_SRC

**** easing
     #+BEGIN_SRC typescript
       new Scroll({ easing: "linear" })
     #+END_SRC
     The *easing* option indicates the default animation of the scroll, by default *"inOutQuad"*

     #+BEGIN_SRC pug :exports results :results html
       #scroll-easings.scroll-container
         h1 Top
         .button-container
           each item in [ "linear", "easeInOutQuad", "easeInOutQuint", "easeOutBounce", "easeInOutBack"]
             button.scroll-button(onclick=`scrollEasing("${item}")`)=item
         hr.spacer
         hr.spacer
         h1 Bottom
     #+END_SRC

     You can also create your own easing function:
     #+BEGIN_SRC typescript
       new Scroll({ easing: (t, b, c, d) => (c * t) / d + b})
     #+END_SRC
     That's the one I use for "linear"

     It can be changed any time:
     #+BEGIN_SRC typescript
       const scrollManager = new Scroll({ easing: "linear" })

       scrollManager.easing = "easeOutBounce"
     #+END_SRC

     Learn more about easing functions [[https://easings.net/en][here]]:

**** onScroll
     #+BEGIN_SRC typescript
       new Scroll({
           onScroll: (external) => {
               if (external) {
                   // external scroll
               } else {
                   // internal scroll
               }
           },
       })
     #+END_SRC

     What does it mean?, well, *external* is an attempt

     @@html:
     <div id="scroll-onScroll" class="scroll-container">
     top
     <div class="button-container">
     <button class="scroll-button" onclick="scrollOnScroll()"> alert on scroll </button>
     </div>
     @@
     #+BEGIN_SRC javascript
       scrollManager.onScroll = (external) => {
           if (external) {
               alert("external scroll detected!");
               scrollManager.onScroll = null;
           }
       };
     #+END_SRC
     @@html:
     <hr class="spacer" /> <hr class="spacer" />
     bottom
     </div>
     @@

     It can be changed any time:
     ,#+BEGIN_SRC typescript
     const scrollManager = new Scroll({ onScroll: null })

     scrollManager.onScroll = () => alert("hi")

     #+END_SRC
** scroll
   #+BEGIN_SRC typescript
     const scrollManager = new Scroll()

     // toPosition
     scrollManager.scroll({
         value,
         duration?,
         easing?
     }) // or
     scrollManager.scroll(value, duration?, easing?)

     // toElement
     scrollManager.scroll({
         element,
         value?,
         duration?,
         easing?
     }) // or
     scrollManager.scroll(element, value?, duration?, easing?)
   #+END_SRC

*** to "position"
    #+BEGIN_SRC typescript
      const scrollManager = new Scroll()

      scrollManager.scroll({
          value,
          duration?,
          easing?,
      })
      //or
      scrollManager.scroll(value, duration?, easing?)
    #+END_SRC

    Calling *scroll* will do scroll to the position *value*: eg. *0* will do scroll
    to the top of the page

    *duration* is the duration of that scroll action. If not specified it will use the
    one in [[duration][constructor]].

    *easing* is the ease animation of that scroll action. If not specified it will use the
    one in [[easing][constructor]].
*** to "element"
    #+BEGIN_SRC typescript
      const scrollManager = new Scroll()

      scrollManager.scroll({
          element,
          value?,
          duration?,
          easing?,
      })
      //or
      scrollManager.scroll(element, value?, duration?, easing?)
    #+END_SRC

    Calling *scroll* will do scroll to the position of the element *element*, and
    will center it at *value*, 0 by default. ie. the element will be at the top of
    the screen

    *duration* is the duration of that scroll action. If not specified it will use the
    one in [[duration][constructor]].

    *easing* is the ease animation of that scroll action. If not specified it will use the
    one in [[easing][constructor]].
** offset
   #+BEGIN_SRC typescript
     const scrollManager = new Scroll()

     scrollManager.offset({value: 100,
                           duration: 1000,
                           easing: "some",
                          })
     //or
     scrollManager.offset(100, 1000, "some")
   #+END_SRC
** other
*** stopAllAnimations
    To stop all scroll animations:

    #+BEGIN_SRC typescript
      const scrollManager = new Scroll()
      scrollManager.stopAllAnimations()
    #+END_SRC

*** size
    The size of the *Scroll* container
    #+BEGIN_SRC typescript
      (new Scroll()).size // size of the window
      (new Scroll("#container")).size // size of the element #container
    #+END_SRC
    The orientation of the value returned depends on the direction specified in the [[horizontal][contructor]]
*** scrollSize
    The total scroll you can do within the *Scroll* container
    #+BEGIN_SRC typescript
      (new Scroll()).scrollSize // scrollSize of the windows
      (new Scroll("#container")).scrollSize // scrollSize of the element #container
    #+END_SRC
    It's related to *scrollWidth/scrollHeight* properties of /HTMLElements/.

    The orientation of the value returned depends on the direction specified in the [[horizontal][contructor]]
*** scrollPosition
    The current position of the scroll
    #+BEGIN_SRC typescript
      (new Scroll()).scrollPosition // scrollPosition of the windows
      (new Scroll("#container")).scrollPosition // scrollPosition of the element #container
    #+END_SRC

    For example, if you
    #+BEGIN_SRC typescript
      (new Scroll()).scroll(100)
    #+END_SRC
    the *scrollPosition* will be 100


    The orientation of the value returned depends on the direction specified in the [[horizontal][contructor]]
*** getRelativeElementPosition
    The relative position of certain element

    #+BEGIN_SRC typescript
      (new Scroll()).getRelativeElementPosition("#some-element")
    #+END_SRC
    It relates to [[to "element"][scroll]] (to "element"), so for example, if you
    #+BEGIN_SRC typescript
      (new Scroll()).scroll("#some-element", 0.5)
    #+END_SRC

    the relative position will be *0.5*
* Misc
  Here I export some other useful functions.

  They're meant for scroll-utility internal use, but I export them just in case someone
  wouldn't want to create a *Scroll* instance to access some of it's element properties.
  #+BEGIN_SRC typescript
    import { Misc } from "scroll-utility"

    const Misc = ScrollUtility.Scroll // from cdn
  #+END_SRC

** getSize
   Returns the size (width/height) of the element that match *element* selector
   #+BEGIN_SRC typescript
     Misc.getSize(element: string, horizontal)

     Misc.getSize(window, true)
     Misc.getSize("#container") // horizontal: false by default
   #+END_SRC

** getSizeWithBorders
   Returns the size (including borders) of the element that match *element* selector
   #+BEGIN_SRC typescript
     Misc.getSizeWithBorders(element: string, horizontal)

     Misc.getSizeWithBorders(window, true)
     Misc.getSizeWithBorders("#container") // horizontal: false by default
   #+END_SRC

** getScrollPosition
   Returns the position of the scroll (top/left)
   #+BEGIN_SRC typescript
     Misc.getScrollPosition(element: string, horizontal)

     Misc.getScrollPosition(window, true)
     Misc.getScrollPosition("#container") // horizontal: false by default
   #+END_SRC

** getScrollSize
   Returns equivalent of scrollWidth/scrollHeight of elements
   #+BEGIN_SRC typescript
     Misc.getScrollSize(element: string, horizontal)

     Misc.getScrollSize(window, true)
     Misc.getScrollSize("#container") // horizontal: false by default
   #+END_SRC

** getRelativeElementPosition
   Returns the degree in which the element is centered:
   - < -1: above top
   - -1 < x < 0: leaving top
   - 0: top
   - .5: centered
   - 1: bottom
   - 2 > x > 1: leaving bottom
   - > 2: bellow bottom
   #+BEGIN_SRC typescript
     Misc.getRelativeElementPosition(container: string, element: string, horizontal: boolean)

     Misc.getRelativeElementPosition(window, "#some-element")
   #+END_SRC

** getDistToCenterElement
   Returns the distance (in pxs) to center some element
   #+BEGIN_SRC typescript
     Misc.getDistToCenterElement(container: string, element: string, value: number, horizontal: boolean)

     Misc.getDistToCenterElement(window, "#some-element", 0) // top
     Misc.getDistToCenterElement(window, "#some-element", .5) // centered
     Misc.getDistToCenterElement(window, "#some-element", 1) // bottom
   #+END_SRC

** scrollTo
* Browser Compatibility
  There are automated test for several browsers, thanks to [[https://www.browserstack.com][Browserstack]].\\
  Compatibility garanteed in all major browsers.\\
  #+ATTR_HTML: :align middle
  https://3fxtqy18kygf3on3bu39kh93-wpengine.netdna-ssl.com/wp-content/uploads/2018/03/header-logo.svg
