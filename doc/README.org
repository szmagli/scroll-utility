#+TITLE: scroll-utility
#+HTML_LINK_HOME: https://leddgroup.github.io/scroll-utility
#+HTML_DESCRIPTION: A simple to use scroll utility package for centering elements, and smooth animations
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="assets/index.css">
#+HTML_HEAD: <script type="text/javascript" src="index.js"> </script>
#+HTML_HEAD: <script type="text/javascript" src="scroll-utility.js"> </script>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="assets/notifications.css">
#+HTML_HEAD: <script type="text/javascript" src="assets/notifications.js"> </script>
#+INFOJS_OPT: path:assets/org-info.js view:info
#+OPTIONS: num:nil
#+STARTUP: content


* Features
  - Extremely powerful for scrolling to anywhere in the page, like centering elements to certain degree.
  - Custom easing animations for scrolling
  - Detect onScroll events and differentiate between user and utility scroll
  - High performance
  - Dependency free
  - Small footprint 9.32KiB
  - Typescript friendly
  - Handle multiple scroll animation at the same time
* Installation
  From npm:
  #+BEGIN_SRC sh
    $ npm install --save scroll-utility
  #+END_SRC
  From a cdn: [[https://www.jsdelivr.com/package/npm/scroll-utility][jsdelivr]]
  #+BEGIN_SRC html
    <script src="https://cdn.jsdelivr.net/npm/scroll-utility@5"></script>
  #+END_SRC

* API
** constructor
   #+INCLUDE: "examples/constructor/index.ts" src typescript
   That will create a new =ScrollUtility= instance, which you can use to scroll. \\
   Sometimes its useful for creating a new ScrollUtility for scrolling with more specific options

*** container
    #+INCLUDE: "examples/constructor/container.ts" src typescript
    #+BEGIN_SRC pug :exports results :results html
      details
        summary
          b Demo:
        #scroll-container.scroll-container
          .button-container
            button.scroll-button(onclick=`example.constructor.container()`) scroll window
          hr.spacer
          #container.some-element.scroll-container(position="relative")
            h1 #container
            .button-container.left
              button.scroll-button(onclick=`example.constructor.container(true)`) scroll container
            hr.spacer
            hr.spacer
    #+END_SRC

    The =container= option indicates the element in which the scroll takes place; ~window~ by default

    If it's a ~string~, then it will use it as a *querySelector* with
    ~document.querySelector~ for getting an ~Element~. \\
    If the *querySelector* doesn't match an element, it will send a warning to the console and use window to scroll
    
*** horizontal
    #+INCLUDE: "examples/constructor/horizontal.ts" src typescript
    #+BEGIN_SRC pug :exports results :results html
      details
        summary
          b Demo:
        #scroll-horizontal.scroll-container.horizontal
          .background
          .button-container
            each item in ["horizontal", "vertical"]
              button.scroll-button(onclick=`example.constructor.horizontal("${item}")`)= item
          hr.spacer
          hr.spacer
    #+END_SRC

    The *horizontal* option indicates the direction when scrolling, by default
    *false*, wich means vertical scroll

*** duration
    #+INCLUDE: "examples/constructor/duration.ts" src typescript
    #+BEGIN_SRC pug :exports results :results html
      details
        summary
          b Demo:
        #scroll-duration.scroll-container
          .button-container
            each duration in ["1000", "750", "500", "0"]
              button.scroll-button(onclick=`example.constructor.duration(${duration})`)= duration
          h1 Top
          hr.spacer
          hr.spacer
          h1 Bottom
    #+END_SRC

    The *duration* option indicates the default duration of the scroll animations in milliseconds, by default _1000ms_\\
    It will be used along with [[easing]] for creating the *smooth* animation when scrolling

    If you want to disable the /smooth/ animation, set *duration* to 0.

*** easing
    #+INCLUDE: "examples/constructor/easing.ts" src typescript
    #+BEGIN_SRC pug :exports results :results html
      details
        summary
          b Demo:
        #scroll-easings.scroll-container
          .button-container
            each easing in [ "linear", "easeInOutQuad", "easeOutBounce", "easeInOutBack"]
              button.scroll-button(onclick=`example.constructor.easing("${easing}")`)= easing
          h1 Top
          hr.spacer
          hr.spacer
          h1 Bottom
    #+END_SRC

    Learn more about easing functions [[https://easings.net/en][here]]:

*** onScroll
    #+INCLUDE: "examples/constructor/onScroll.ts" src typescript

    *try scrolling to see results:*
    #+BEGIN_SRC pug :exports results :results html
      details
        summary
          b Demo:
        #scroll-onScroll.scroll-container
          .button-container
            each item in [ "scroll" ]
              button.scroll-button(onclick=`example.constructor.onScroll()`)= item
          h1 Top
          hr.spacer
          hr.spacer
          h1 Bottom
    #+END_SRC

    It can be changed any time:
    #+BEGIN_SRC typescript
      const scrollManager = new ScrollUtility({ onScroll: null })
      scrollManager.onScroll = () => alert("hi")
    #+END_SRC

*** onStop
    #+INCLUDE: "examples/constructor/onStop.ts" src typescript
    #+BEGIN_SRC pug :exports results :results html
      details
        summary
          b Demo:
        #scroll-onStop.scroll-container
          .button-container
            button.scroll-button(onclick=`example.constructor.onStop()`) scroll
          h1 Top
          hr.spacer
          hr.spacer
          h1 Bottom
    #+END_SRC

    It can be changed any time:
    #+BEGIN_SRC typescript
      const scrollManager = new ScrollUtility({ onStop: null })
      scrollManager.onStop = () => alert("hi")
    #+END_SRC

*** force
    #+INCLUDE: "examples/constructor/force.ts" src typescript

    It ignores external scroll and previous scroll animations

    *try scrolling to see results:*
    #+BEGIN_SRC pug :exports results :results html
      details
        summary
          b Demo:
        #scroll-force.scroll-container
          .button-container
            each item in [ "no force", "force" ]
              button.scroll-button(onclick=`example.constructor.force("${item}")`)= item
          h1 Top
          hr.spacer
          hr.spacer
          h1 Bottom
    #+END_SRC

    It can be changed any time:
    #+BEGIN_SRC typescript
      const scrollManager = new ScrollUtility({ force: true })
      scrollManager.force = false
    #+END_SRC

** scrollTo
   #+INCLUDE: "examples/scrollTo.ts" src typescript
   #+BEGIN_SRC pug :exports results :results html
     details
       summary
         b Demo:
       .scroll-container
         .button-container
           each item in ["scrollTo(0)", "scrollTo(\'#here\')", "scrollTo(Infinity)"]
             button.scroll-button(onclick=`ScrollUtility.global.${item}`)=item
         hr.spacer
         #here.some-element
           h1 #here
         hr.spacer
   #+END_SRC

  See [[duration]] for info on option duration\\
  See [[easing]] for info on option easing\\
  See [[force]] for info on option force\\
   
*** element
    #+INCLUDE: "examples/scrollTo.element.ts" src typescript
    Center element at some degree
    #+BEGIN_SRC pug :exports results :results html
      details
        summary
          b Demo:
        .scroll-container
          .button-container
            each item in ["0", "0.25", "0.5", "0.75", "1"]
              button.scroll-button(onclick=`example.scrollTo.element(${item})`)=item
          hr.spacer
          #scrollTo-value.some-element
            h1 element to center
          hr.spacer
    #+END_SRC

*** value
** offset
   #+BEGIN_SRC typescript
     const scrollManager = new ScrollUtility()

     scrollManager.offset({value: 100,
                           duration: 1000,
                           easing: "some",
                          })
     //or
     scrollManager.offset(100, 1000, "some")
   #+END_SRC

** updateOptions
** stop
   To stop all scroll animations:

   #+BEGIN_SRC typescript
     const scrollManager = new ScrollUtility()
     scrollManager.stopAllAnimations()
   #+END_SRC

** size
   The size of the *Scroll* container
   #+BEGIN_SRC typescript
     (new Scroll()).size // size of the window
     (new Scroll("#container")).size // size of the element #container
   #+END_SRC
   The orientation of the value returned depends on the direction specified in the [[horizontal][contructor]]
** scrollSize
   The total scroll you can do within the *Scroll* container
   #+BEGIN_SRC typescript
     (new Scroll()).scrollSize // scrollSize of the windows
     (new Scroll("#container")).scrollSize // scrollSize of the element #container
   #+END_SRC
   It's related to *scrollWidth/scrollHeight* properties of /HTMLElements/.

   The orientation of the value returned depends on the direction specified in the [[horizontal][contructor]]
** scrollPosition
   The current position of the scroll
   #+BEGIN_SRC typescript
     (new Scroll()).scrollPosition // scrollPosition of the windows
     (new Scroll("#container")).scrollPosition // scrollPosition of the element #container
   #+END_SRC

   For example, if you
   #+BEGIN_SRC typescript
     (new Scroll()).scroll(100)
   #+END_SRC
   the *scrollPosition* will be 100


   The orientation of the value returned depends on the direction specified in the [[horizontal][contructor]]
** getRelativeElementPosition
   The relative position of certain element

   #+BEGIN_SRC typescript
     (new Scroll()).getRelativeElementPosition("#some-element")
   #+END_SRC
   It relates to (to "element"), so for example, if you
   #+BEGIN_SRC typescript
     (new Scroll()).scroll("#some-element", 0.5)
   #+END_SRC

   the relative position will be *0.5*

   
