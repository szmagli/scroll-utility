#+TITLE: scroll-utility
#+HTML_LINK_HOME: https://leddgroup.github.io/scroll-utility
#+HTML_DESCRIPTION: A simple to use scroll utility package for centering elements, and smooth animations
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="assets/index.css">
#+HTML_HEAD: <script type="text/javascript" src="index.js"> </script>
#+HTML_HEAD: <script type="text/javascript" src="scroll-utility.js"> </script>

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="assets/notifications.css">
#+HTML_HEAD: <script type="text/javascript" src="assets/notifications.js"> </script>
#+INFOJS_OPT: path:assets/org-info.js view:info
#+OPTIONS: num:nil
#+STARTUP: content

# * Features
#   - Extremely powerful for scrolling to anywhere in the page, like centering elements to certain degree.
#   - Custom easing animations for scrolling
#   - Detect onScroll events and differentiate between user and utility scroll
#   - High performance
#   - Dependency free
#   - Small footprint 9.32KiB
#   - Typescript friendly
#   - Handle multiple scroll animation at the same time

# * Installation
#   From npm:
#   #+BEGIN_SRC sh
#     $ npm install --save scroll-utility
#   #+END_SRC
#   From a cdn: [[https://www.jsdelivr.com/package/npm/scroll-utility][jsdelivr]]
#   #+BEGIN_SRC html
#     <script src="https://cdn.jsdelivr.net/npm/scroll-utility@5"></script>
#   #+END_SRC

# * Quick overview
#   #+INCLUDE: "examples/howto.ts" src typescript
#   #+BEGIN_SRC pug :exports results :results html
#     details(open)
#       summary
#         b Demo:
#       .scroll-container
#         .button-container
#           each item in ["scrollTo(0)", "offset(-200)",  "scrollTo(\'#here\')","offset(200)",  "scrollTo(10000)"]
#             button.scroll-button(onclick=`ScrollUtility.${item}`)=item
#         hr.spacer
#         #here.some-element
#           h1 #here
#         hr.spacer
#   #+END_SRC
# * Browser Compatibility
#   There are automated test for several browsers, thanks to [[https://www.browserstack.com][Browserstack]].\\
#   Compatibility garanteed in all major browsers.\\
#   #+ATTR_HTML: :align middle
#   https://3fxtqy18kygf3on3bu39kh93-wpengine.netdna-ssl.com/wp-content/uploads/2018/03/header-logo.svg

* API
** constructor
   #+INCLUDE: "examples/constructor.ts" src typescript
   That will create a new =ScrollUtility= instance, which you can use to scroll. \\
   Sometimes its useful for creating a new ScrollUtility for scrolling with more specific options
   
*** container
    #+INCLUDE: "examples/constructor.container.ts" src typescript
    #+BEGIN_SRC pug :exports results :results html
      details
        summary 
          b Demo:
        #scroll-container.scroll-container
          .button-container
            button.scroll-button(onclick=`scrollContainer()`) scroll window
          hr.spacer
          #container.some-element.scroll-container(position="relative")
            h1 #container
            .button-container.left
              button.scroll-button(onclick=`scrollContainer(true)`) scroll container
            hr.spacer
            hr.spacer
    #+END_SRC

    The =container= option indicates the element in which the scroll takes place; ~window~ by default

    If it's a ~string~, then it will use it as a *querySelector* with
    ~document.querySelector~ for getting an ~Element~. \\
    If the *querySelector* doesn't match an element, it will send a warning to the console and use window to scroll

*** horizontal
  #+INCLUDE: "examples/constructor.horizontal.ts" src typescript
  #+BEGIN_SRC pug :exports results :results html
    details
      summary
        b Demo:
      #scroll-horizontal.scroll-container.horizontal
        .background
        .button-container
          each item in ["horizontal", "vertical"]
            button.scroll-button(onclick=`scrollHorizontal("${item}")`)= item
        hr.spacer
        hr.spacer
  #+END_SRC
  
    The *horizontal* option indicates the direction when scrolling, by default
    *false*, wich means vertical scroll

*** duration
    #+INCLUDE: "examples/constructor.duration.ts" src typescript
    #+BEGIN_SRC pug :exports results :results html
      details
        summary 
          b Demo:
        #scroll-duration.scroll-container
          .button-container
            each duration in ["1000", "750", "500", "0"]
              button.scroll-button(onclick=`scrollDuration(${duration})`)= duration
          h1 Top
          hr.spacer
          hr.spacer
          h1 Bottom
    #+END_SRC
    
    The *duration* option indicates the default duration of the scroll animations in milliseconds, by default _1000ms_\\
    It will be used along with [[easing]] for creating the *smooth* animation when scrolling
    
    If you want to disable the /smooth/ animation, set *duration* to 0.
    
*** easing
    #+INCLUDE: "examples/constructor.easing.ts" src typescript
    #+BEGIN_SRC pug :exports results :results html
      details
        summary 
          b Demo:
        #scroll-easings.scroll-container
          .button-container
            each easing in [ "linear", "easeInOutQuad", "easeOutBounce", "easeInOutBack"]
              button.scroll-button(onclick=`scrollEasing("${easing}")`)= easing
          h1 Top
          hr.spacer
          hr.spacer
          h1 Bottom
    #+END_SRC

    Learn more about easing functions [[https://easings.net/en][here]]:

*** onScroll
    #+INCLUDE: "examples/constructor.onScroll.ts" src typescript
    
    *try scrolling to see results:*
    #+BEGIN_SRC pug :exports results :results html
      details
        summary 
          b Demo:
        #scroll-onScroll.scroll-container
          .button-container
            each item in [ "scroll" ]
              button.scroll-button(onclick=`scrollOnScroll()`)= item
          h1 Top
          hr.spacer
          hr.spacer
          h1 Bottom
    #+END_SRC

    It can be changed any time:
    #+BEGIN_SRC typescript
    const scrollManager = new Scroll({ onScroll: null })
    scrollManager.onScroll = () => alert("hi")
    #+END_SRC
    
*** onStop
    #+INCLUDE: "examples/constructor.onStop.ts" src typescript
    
    #+BEGIN_SRC pug :exports results :results html
      details
        summary 
          b Demo:
        #scroll-onStop.scroll-container
          .button-container
            button.scroll-button(onclick=`scrollOnStop()`) scroll
          h1 Top
          hr.spacer
          hr.spacer
          h1 Bottom
    #+END_SRC
    
    It can be changed any time:
    #+BEGIN_SRC typescript
    const scrollManager = new Scroll({ onStop: null })
    scrollManager.onStop = () => alert("hi")
    #+END_SRC
    
*** force  
    #+INCLUDE: "examples/constructor.force.ts" src typescript
    
    *try scrolling to see results:*
    #+BEGIN_SRC pug :exports results :results html
      details
        summary 
          b Demo:
        #scroll-force.scroll-container
          .button-container
            each item in [ "no force", "force" ]
              button.scroll-button(onclick=`scrollForce("${item}")`)= item
          h1 Top
          hr.spacer
          hr.spacer
          h1 Bottom
    #+END_SRC
    
    It can be changed any time:
    #+BEGIN_SRC typescript
    const scrollManager = new Scroll({ force: true })
    scrollManager.force = false
    #+END_SRC
    
** scroll
   #+BEGIN_SRC typescript
     const scrollManager = new Scroll()

     // toPosition
     scrollManager.scroll({
         value,
         duration?,
         easing?
     }) // or
     scrollManager.scroll(value, duration?, easing?)

     // toElement
     scrollManager.scroll({
         element,
         value?,
         duration?,
         easing?
     }) // or
     scrollManager.scroll(element, value?, duration?, easing?)
   #+END_SRC

*** to "position"
    #+BEGIN_SRC typescript
      const scrollManager = new Scroll()

      scrollManager.scroll({
          value,
          duration?,
          easing?,
      })
      //or
      scrollManager.scroll(value, duration?, easing?)
    #+END_SRC

    Calling *scroll* will do scroll to the position *value*: eg. *0* will do scroll
    to the top of the page

    *duration* is the duration of that scroll action. If not specified it will use the
    one in [[duration][constructor]].

    *easing* is the ease animation of that scroll action. If not specified it will use the
    one in [[easing][constructor]].
*** to "element"
    #+BEGIN_SRC typescript
      const scrollManager = new Scroll()

      scrollManager.scroll({
          element,
          value?,
          duration?,
          easing?,
      })
      //or
      scrollManager.scroll(element, value?, duration?, easing?)
    #+END_SRC

    Calling *scroll* will do scroll to the position of the element *element*, and
    will center it at *value*, 0 by default. ie. the element will be at the top of
    the screen

    *duration* is the duration of that scroll action. If not specified it will use the
    one in [[duration][constructor]].

    *easing* is the ease animation of that scroll action. If not specified it will use the
    one in [[easing][constructor]].
** offset
   #+BEGIN_SRC typescript
     const scrollManager = new Scroll()

     scrollManager.offset({value: 100,
                           duration: 1000,
                           easing: "some",
                          })
     //or
     scrollManager.offset(100, 1000, "some")
   #+END_SRC
   
** updateOptions
** stop
   To stop all scroll animations:

   #+BEGIN_SRC typescript
     const scrollManager = new Scroll()
     scrollManager.stopAllAnimations()
   #+END_SRC

** size
   The size of the *Scroll* container
   #+BEGIN_SRC typescript
     (new Scroll()).size // size of the window
     (new Scroll("#container")).size // size of the element #container
   #+END_SRC
   The orientation of the value returned depends on the direction specified in the [[horizontal][contructor]]
** scrollSize
   The total scroll you can do within the *Scroll* container
   #+BEGIN_SRC typescript
     (new Scroll()).scrollSize // scrollSize of the windows
     (new Scroll("#container")).scrollSize // scrollSize of the element #container
   #+END_SRC
   It's related to *scrollWidth/scrollHeight* properties of /HTMLElements/.

   The orientation of the value returned depends on the direction specified in the [[horizontal][contructor]]
** scrollPosition
   The current position of the scroll
   #+BEGIN_SRC typescript
     (new Scroll()).scrollPosition // scrollPosition of the windows
     (new Scroll("#container")).scrollPosition // scrollPosition of the element #container
   #+END_SRC

   For example, if you
   #+BEGIN_SRC typescript
     (new Scroll()).scroll(100)
   #+END_SRC
   the *scrollPosition* will be 100


   The orientation of the value returned depends on the direction specified in the [[horizontal][contructor]]
** getRelativeElementPosition
   The relative position of certain element

   #+BEGIN_SRC typescript
     (new Scroll()).getRelativeElementPosition("#some-element")
   #+END_SRC
   It relates to [[to "element"][scroll]] (to "element"), so for example, if you
   #+BEGIN_SRC typescript
     (new Scroll()).scroll("#some-element", 0.5)
   #+END_SRC

   the relative position will be *0.5*
