#+TITLE: scroll-utility
#+HTML_LINK_HOME: https://github.com/LeDDGroup/scroll-utility
#+HTML_DESCRIPTION: A simple to use scroll utility package for centering elements, and smooth animations
#+HTML_HEAD: <meta name="viewport" content="width=device-width, initial-scale=1.0">
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="assets/awsm.css">
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="assets/index.css">
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="assets/notifications.css">
#+HTML_HEAD: <script type="text/javascript" src="index.js"> </script>
#+HTML_HEAD: <script type="text/javascript" src="scroll-utility.js"> </script>
#+HTML_HEAD: <script type="text/javascript" src="assets/notifications.js"> </script>
#+KEYWORDS: scroll smooth simple center scrolling centering
#+OPTIONS: num:nil
#+STARTUP: content

* Installation
	From npm:
	#+BEGIN_SRC sh
		npm install --save scroll-utility
	#+END_SRC
	From a cdn: [[https://www.jsdelivr.com/package/npm/scroll-utility][jsdelivr]]
	#+BEGIN_SRC html
		<script src="https://cdn.jsdelivr.net/npm/scroll-utility@5"></script>
	#+END_SRC

* Basic Usage
	 	 #+BEGIN_SRC pug :exports results :results html
			 #scrollTo.scroll-container
				 .button-container
					 each item in ["0", "\'#some-element\'", "500"]
						 button.scroll-button(onclick=`example.basicTo(${item})`)=item
				 .button-container.left
					 each item in ["-200", "\'window\'", "200"]
						 button.scroll-button(onclick=`example.basicBy(${item})`)=item
				 hr.spacer
				 hr.spacer
				 #here.some-element
					 h1 #here
				 hr.spacer
				 hr.spacer
	 #+END_SRC
* API
** constructor
	 	 That will create a new =ScrollUtility= instance, which you can use to scroll. \\
	 Sometimes its useful for creating a new ScrollUtility for scrolling with more specific options
*** container
		
		#+BEGIN_SRC pug :exports results :results html
			#scroll-container.scroll-container.normal
				.button-container
					button.scroll-button(onclick=`example.constructor.container()`) scroll window
				hr.spacer
				#container.some-element.scroll-container(position="relative")
					h1 #container
					.button-container
						button.scroll-button(onclick=`example.constructor.container(true)`) scroll container
					hr.spacer
					hr.spacer
		#+END_SRC

		The =container= option indicates the element in which the scroll takes place; ~window~ by default

		If it's a ~string~, then it will use it as a *querySelector* with
		~document.querySelector~ for getting an ~Element~. \\
		If the *querySelector* doesn't match an element, it will send a warning to the console and use window to scroll

*** horizontal
				#+BEGIN_SRC pug :exports results :results html
			#scroll-horizontal.scroll-container.horizontal
				.button-container
					each item in ["horizontal", "vertical"]
						button.scroll-button(onclick=`example.constructor.horizontal("${item}")`)= item
				- const to = 300
				- for (let i = 50; i < to; i += 50)
					.pspacer(style=`top: ${i}%; width: ${to}%;`)
					.horizontal.pspacer(style=`left: ${i}%; height: ${to}%;`)
		#+END_SRC

		The *horizontal* option indicates the direction when scrolling, by default
		*false*, wich means vertical scroll

*** duration
				#+BEGIN_SRC pug :exports results :results html
			#scroll-duration.scroll-container
				.button-container
					each duration in ["1000", "750", "500", "250", "0"]
						button.scroll-button(onclick=`example.constructor.duration(${duration})`)= duration
				h1 Top
				hr.spacer
				hr.spacer
				h1 Bottom
		#+END_SRC

		The *duration* option indicates the default duration of the scroll animations in milliseconds, by default _1000ms_\\
		It will be used along with [[easing]] for creating the *smooth* animation when scrolling

		If you want to disable the /smooth/ animation, set *duration* to 0.

*** easing
				#+BEGIN_SRC pug :exports results :results html
			#scroll-easings.scroll-container
				.button-container
					each easing in [ "linear", "easeInOutQuad", "easeOutBounce" ]
						button.scroll-button(onclick=`example.constructor.easing("${easing}")`)= easing
				h1 Top
				hr.spacer
				hr.spacer
				h1 Bottom
		#+END_SRC

		Learn more about easing functions [[https://easings.net/en][here]]:

** scrollTo
	 	 #+BEGIN_SRC pug :exports results :results html
		 #scrollTo.scroll-container
			 .button-container
				 each item in ["0", "\'#here\'", "Infinity"]
					 button.scroll-button(onclick=`example.scrollTo(${item})`)=item
			 hr.spacer
			 #here.some-element
				 h1 #here
			 hr.spacer
	 #+END_SRC

	 See [[duration]] for info of option duration\\
	 See [[easing]] for info of option easing\\
*** value
		:PROPERTIES:
		:CUSTOM_ID: scrollToValue
		:END:
				Scroll to certain value
		#+BEGIN_SRC pug :exports results :results html
			#scrollToValue.scroll-container
				.button-container
					each item in ["0", "50", "200", "Infinity"]
						button.scroll-button(onclick=`example.scrollTo.value(${item})`)=item
				hr.spacer
				hr.spacer
		#+END_SRC

*** element
		:PROPERTIES:
		:CUSTOM_ID: scrollToElement
		:END:
				Center element at some degree
		#+BEGIN_SRC pug :exports results :results html
			#example-scrollToElement.scroll-container
				.button-container
					each item in ["0", "0.25", "0.5", "0.75", "1"]
						button.scroll-button(onclick=`example.scrollTo.element(${item})`)=item
				hr.spacer
				#scrollTo-element.some-element
					h1 element to center
				hr.spacer
		#+END_SRC

** offset
	 	 #+BEGIN_SRC pug :exports results :results html
		 #offset.scroll-container
			 .button-container
				 each item in ["-100", "100"]
					 button.scroll-button(onclick=`example.offset(${item})`)=item
			 hr.spacer
			 hr.spacer
			 hr.spacer
	 #+END_SRC

	 See [[duration]] for info of option duration\\
	 See [[easing]] for info of option easing\\
*** value
		:PROPERTIES:
		:CUSTOM_ID: offsetValue
		:END:
				Offset scroll position by certain value
		#+BEGIN_SRC pug :exports results :results html
			#offsetValue.scroll-container
				.button-container
					each item in ["-100", "100"]
						button.scroll-button(onclick=`example.offset.value(${item})`)=item
				hr.spacer
				hr.spacer
		#+END_SRC

*** element
		:PROPERTIES:
		:CUSTOM_ID: offsetElement
		:END:
		Offset scroll position by a percent of the size of some element
				Offset scroll by its container size:
		#+BEGIN_SRC pug :exports results :results html
			#offsetElement.scroll-container
				.button-container
					each item in ["-1", "-0.5", "0.5", "1"]
						button.scroll-button(onclick=`example.offset.element(${item})`)=item
				- const to = 600
				- for (let i = 50; i < to; i += 50)
					.pspacer(style=`top: ${i}%;`)
		#+END_SRC

** stop
	 	 Stop all scroll animations
	 #+BEGIN_SRC pug :exports results :results html
		 #stop.scroll-container
			 .button-container
				 each item in ["scroll", "stop"]
					 button.scroll-button(onclick=`example.stop(${item === "stop"})`)=item
			 hr.spacer
			 hr.spacer
	 #+END_SRC

** scrollPosition
	 	 The position of the scroll of some element. \\
	 Somewhat equivalent of ~scrollLeft/scrollTop~; depending on the direction [[horizontal][specified]]
	 #+BEGIN_SRC pug :exports results :results html
		 #scrollPosition.scroll-container
			 .button-container
					button.scroll-button(onclick=`example.scrollPosition()`) scrollPosition
			 hr.spacer
			 hr.spacer
	 #+END_SRC

** size
	 	 The size of some element. \\
	 Somewhat equivalent of ~clientWidth/clientHeight~; depending on the direction [[horizontal][specified]]
	 #+BEGIN_SRC pug :exports results :results html
		 #size.scroll-container
			 .button-container
					button.scroll-button(onclick=`example.size()`) size
	 #+END_SRC

** scrollSize
	 	 The size of the scroll of some element. \\
	 Somewhat equivalent of ~scrollWidth(or scrollHeight) - clientWidth(or clientHeight)~; depending on the direction [[horizontal][specified]]
	 #+BEGIN_SRC pug :exports results :results html
		 #scrollSize.scroll-container
			 .button-container
					button.scroll-button(onclick=`example.scrollSize()`) scrollSize
			 hr.spacer
			 hr.spacer
	 #+END_SRC

** relativePosition
	 	 The ~relativePosition~ of some element. \\
	 It correlates to  [[#scrollToElement][scrollTo element]]
	 #+BEGIN_SRC pug :exports results :results html
		 #relativePosition.scroll-container
			 .button-container
				each item in ["0", "0.5", "1"]
					button.scroll-button(onclick=`example.relativePosition(${item})`)=`${item}`
				button.scroll-button(onclick=`example.relativePosition()`) relativePosition
			 hr.spacer
			 #relativePosition-element.some-element
				 h1 some-element
			 hr.spacer
	 #+END_SRC

** distToElement
	 	 The distance to center some element \\
	 It correlates to [[#scrollToElement][scrollTo element]]
	 #+BEGIN_SRC pug :exports results :results html
		 #distToElement.scroll-container
			 .button-container
				each item in ["0", "0.5", "1"]
					button.scroll-button(onclick=`example.distToElement(${item})`)=`${item}`
			 hr.spacer
			 #distToElement-element.some-element
				 h1 some-element
			 hr.spacer
	 #+END_SRC

** elementSize
	 	 The size of some element \\
	 It correlates to [[size]]
* How to
** scroll to an element and/or center it
	 	 see [[#scrollToElement][scrollTo element]]
** scroll to certain position
	 	 see [[#scrollToValue][scrollTo value]]
** scroll by certain amount of pixels
	 	 see [[#offsetValue][offset value]]
** scroll by a screen
	 	 see [[#offsetElement][offset element]]
** specify easing animation for scroll
	 	 see [[easing]]
** specify duration for scroll
	 	 see [[duration]]
